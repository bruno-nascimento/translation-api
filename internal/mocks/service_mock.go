// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bruno-nascimento/translation-api/internal/service (interfaces: Translation)
//
// Generated by this command:
//
//	mockgen -destination service_mock.go -package mocks github.com/bruno-nascimento/translation-api/internal/service Translation
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	service "github.com/bruno-nascimento/translation-api/internal/service"
	gomock "go.uber.org/mock/gomock"
)

// MockTranslation is a mock of Translation interface.
type MockTranslation struct {
	ctrl     *gomock.Controller
	recorder *MockTranslationMockRecorder
}

// MockTranslationMockRecorder is the mock recorder for MockTranslation.
type MockTranslationMockRecorder struct {
	mock *MockTranslation
}

// NewMockTranslation creates a new mock instance.
func NewMockTranslation(ctrl *gomock.Controller) *MockTranslation {
	mock := &MockTranslation{ctrl: ctrl}
	mock.recorder = &MockTranslationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranslation) EXPECT() *MockTranslationMockRecorder {
	return m.recorder
}

// CreateTranslation mocks base method.
func (m *MockTranslation) CreateTranslation(arg0 context.Context, arg1 *service.NewTranslationParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTranslation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTranslation indicates an expected call of CreateTranslation.
func (mr *MockTranslationMockRecorder) CreateTranslation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTranslation", reflect.TypeOf((*MockTranslation)(nil).CreateTranslation), arg0, arg1)
}

// FindTranslations mocks base method.
func (m *MockTranslation) FindTranslations(arg0 context.Context, arg1 *service.FindTranslationParam) (*service.TranslationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTranslations", arg0, arg1)
	ret0, _ := ret[0].(*service.TranslationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTranslations indicates an expected call of FindTranslations.
func (mr *MockTranslationMockRecorder) FindTranslations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTranslations", reflect.TypeOf((*MockTranslation)(nil).FindTranslations), arg0, arg1)
}
