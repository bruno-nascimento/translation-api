// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bruno-nascimento/translation-api/internal/repository (interfaces: Querier)
//
// Generated by this command:
//
//	mockgen -destination repo_mock.go -package mocks github.com/bruno-nascimento/translation-api/internal/repository Querier
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	repository "github.com/bruno-nascimento/translation-api/internal/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// InsertTranslation mocks base method.
func (m *MockQuerier) InsertTranslation(arg0 context.Context, arg1 repository.InsertTranslationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTranslation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTranslation indicates an expected call of InsertTranslation.
func (mr *MockQuerierMockRecorder) InsertTranslation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTranslation", reflect.TypeOf((*MockQuerier)(nil).InsertTranslation), arg0, arg1)
}

// InsertWord mocks base method.
func (m *MockQuerier) InsertWord(arg0 context.Context, arg1 repository.InsertWordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertWord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertWord indicates an expected call of InsertWord.
func (mr *MockQuerierMockRecorder) InsertWord(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWord", reflect.TypeOf((*MockQuerier)(nil).InsertWord), arg0, arg1)
}

// SelectSimilarWords mocks base method.
func (m *MockQuerier) SelectSimilarWords(arg0 context.Context, arg1 repository.SelectSimilarWordsParams) ([]repository.SelectSimilarWordsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectSimilarWords", arg0, arg1)
	ret0, _ := ret[0].([]repository.SelectSimilarWordsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectSimilarWords indicates an expected call of SelectSimilarWords.
func (mr *MockQuerierMockRecorder) SelectSimilarWords(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectSimilarWords", reflect.TypeOf((*MockQuerier)(nil).SelectSimilarWords), arg0, arg1)
}

// SelectTranslations mocks base method.
func (m *MockQuerier) SelectTranslations(arg0 context.Context, arg1 repository.SelectTranslationsParams) ([]repository.Word, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTranslations", arg0, arg1)
	ret0, _ := ret[0].([]repository.Word)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTranslations indicates an expected call of SelectTranslations.
func (mr *MockQuerierMockRecorder) SelectTranslations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTranslations", reflect.TypeOf((*MockQuerier)(nil).SelectTranslations), arg0, arg1)
}

// SelectWordIdByWordLangRegion mocks base method.
func (m *MockQuerier) SelectWordIdByWordLangRegion(arg0 context.Context, arg1 repository.SelectWordIdByWordLangRegionParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectWordIdByWordLangRegion", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectWordIdByWordLangRegion indicates an expected call of SelectWordIdByWordLangRegion.
func (mr *MockQuerierMockRecorder) SelectWordIdByWordLangRegion(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectWordIdByWordLangRegion", reflect.TypeOf((*MockQuerier)(nil).SelectWordIdByWordLangRegion), arg0, arg1)
}
