// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: queries.sql

package repository

import (
	"context"
)

const insertLanguage = `-- name: InsertLanguage :exec
INSERT INTO languages (id, base, region) VALUES ($1, $2, $3)
`

type InsertLanguageParams struct {
	ID     string `db:"id" json:"id"`
	Base   string `db:"base" json:"base"`
	Region string `db:"region" json:"region"`
}

func (q *Queries) InsertLanguage(ctx context.Context, arg InsertLanguageParams) error {
	_, err := q.db.Exec(ctx, insertLanguage, arg.ID, arg.Base, arg.Region)
	return err
}

const insertTranslation = `-- name: InsertTranslation :exec
INSERT INTO translations (word_id, word_translation_id) VALUES ($1, $2)
`

type InsertTranslationParams struct {
	WordID            string `db:"word_id" json:"word_id"`
	WordTranslationID string `db:"word_translation_id" json:"word_translation_id"`
}

func (q *Queries) InsertTranslation(ctx context.Context, arg InsertTranslationParams) error {
	_, err := q.db.Exec(ctx, insertTranslation, arg.WordID, arg.WordTranslationID)
	return err
}

const insertWord = `-- name: InsertWord :exec
INSERT INTO words (id, language_id, "value") VALUES ($1, $2, $3)
`

type InsertWordParams struct {
	ID         string `db:"id" json:"id"`
	LanguageID string `db:"language_id" json:"language_id"`
	Value      string `db:"value" json:"value"`
}

func (q *Queries) InsertWord(ctx context.Context, arg InsertWordParams) error {
	_, err := q.db.Exec(ctx, insertWord, arg.ID, arg.LanguageID, arg.Value)
	return err
}
