// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns the translation of a word in a given language
	// (GET /v1/translation)
	FindTranslation(c *fiber.Ctx, params FindTranslationParams) error
	// Creates a new translation
	// (POST /v1/translation)
	AddTranslation(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// FindTranslation operation middleware
func (siw *ServerInterfaceWrapper) FindTranslation(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindTranslationParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "word" -------------

	if paramValue := c.Query("word"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument word is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "word", query, &params.Word)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter word: %w", err).Error())
	}

	// ------------- Required query parameter "language" -------------

	if paramValue := c.Query("language"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument language is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "language", query, &params.Language)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter language: %w", err).Error())
	}

	// ------------- Required query parameter "target_language" -------------

	if paramValue := c.Query("target_language"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument target_language is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "target_language", query, &params.TargetLanguage)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter target_language: %w", err).Error())
	}

	return siw.Handler.FindTranslation(c, params)
}

// AddTranslation operation middleware
func (siw *ServerInterfaceWrapper) AddTranslation(c *fiber.Ctx) error {

	return siw.Handler.AddTranslation(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Get(options.BaseURL+"/v1/translation", wrapper.FindTranslation)

	router.Post(options.BaseURL+"/v1/translation", wrapper.AddTranslation)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xW227bRhD9lcW2gF8oU3FcwOBTnSIFDLRukRjoQ2AEY3JEbUrubmaHUoVA/17MkrJ4",
	"S6K2dtsnUXuZOXP2zOWTzl3tnUXLQWefdMjXWEP8fE3kSD48OY/EBuNy7gqU3wJDTsazcVZn7WEV9xK9",
	"clQD60wbyy8vdKJ557H9iyWS3ie6xhCg/Kyhw/bj1cBkbKn3+0QTfmwMYaGzd7pzeDh+v0/0LW7vCGyo",
	"oLU4xr8iV0/dbh0VCmyhKrBlAyUqt1K8RhU32KkHVNyZxUInI6OHW1PDd2s82Sb+AbWvJFzPiweaRp9E",
	"nPNOvm40hwCzjHYr7uED5ixe2J3CkAcjT24ZjDW2fHRrnD1EeiZsn0Vsz84Z2kUTnpqztWsCnkLaSJhd",
	"xI8xJrrHTtTpF0VKGJqqzUjDWMcPqKpfVjp7Nw7kug0jB6vWsEFVO0LFa7DKWRw8irEKVGk2aFUf2DC0",
	"+2NsQAS7SWgttnEMb5uyxCBfYcr1tapMYHnKcDzWl45EEAQ0KyBUwdSmApKnkbeXODy5jSmwkCCisuTK",
	"mfJAUCMjqa3hddwJUKM6OwTYOzJRYOfmffT+V7iOQE14PpynvMlYgPtEG7tybY22DDnLJ9ZgKp3pB2qs",
	"y+3V8vtSVs5zV+tEW6jFxivZVLcQclOjZacT3ZDcWjP7kKXpdrs9r4z9HQtj5WpqbBotLnKoCjQEi8It",
	"7NHAPpkwF4zklHrz+u2duv71Rq2kzoOFUgQALbGFyeU80K7jqafeHDw8mMrE10s0G44Z2tOgmNWJ3iCF",
	"1umL8+X5UrA4jxa80Zl+GZcS7YHX8anTzYuUh7k4RP6zYBwkkrgvMdIrcoprN4XO9I/GFv28Fjfdo4YZ",
	"Nf12ask2cvpjg7Q7vllXYY6ZydRg0jVwgTYpWXMVEHJuoJqvtltUW7Ac1X2AN9ul5uD1Csw/hMhAJfIR",
	"ouhmrtWMEm22N8whbe2//1uA7+Vw8M6GtqJcLJeH/EMbBQLeVyaPSNMPodXX0d63hCud6W/S4xSWdiNY",
	"2hdSzO4RNVMKoiT2ib5YXk5lfOtUB0st1K1TXYtRjgZFeeUaG41cPmEo7Sg5E8SN3UBlpFj6hluvl89B",
	"YL87fYVL67gloRXaIRnS4dwjWL/7dxhiJAuVCkgbJIXdwUSHpq6BdjrTb5AbsiGCHWVGV1c/0/mhlLI0",
	"GEWk1XgXZorbdTGqbZImGPiVK3ZPxsNoet8Phw9Jx/0k5V7MDHf9vkEodVWFJs8xhFVTVbv/TuD/G9H8",
	"EGkJCpTFbV82XxDG8fZdvxtGw9HTXJf7yeWPSAaDRZamleytXeDsanm1TGXS+TMAAP//76hW75IOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
