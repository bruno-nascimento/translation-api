// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns the translation of a word in a given language
	// (GET /v1/translation)
	FindTranslation(c *fiber.Ctx, params FindTranslationParams) error
	// Creates a new translation
	// (POST /v1/translation)
	AddTranslation(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// FindTranslation operation middleware
func (siw *ServerInterfaceWrapper) FindTranslation(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindTranslationParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "word" -------------

	if paramValue := c.Query("word"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument word is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "word", query, &params.Word)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter word: %w", err).Error())
	}

	// ------------- Required query parameter "language" -------------

	if paramValue := c.Query("language"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument language is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "language", query, &params.Language)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter language: %w", err).Error())
	}

	// ------------- Required query parameter "target_language" -------------

	if paramValue := c.Query("target_language"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument target_language is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "target_language", query, &params.TargetLanguage)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter target_language: %w", err).Error())
	}

	return siw.Handler.FindTranslation(c, params)
}

// AddTranslation operation middleware
func (siw *ServerInterfaceWrapper) AddTranslation(c *fiber.Ctx) error {

	return siw.Handler.AddTranslation(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Get(options.BaseURL+"/v1/translation", wrapper.FindTranslation)

	router.Post(options.BaseURL+"/v1/translation", wrapper.AddTranslation)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWTY/bNhD9K8S0wF60K2+SAguduilSYIE2LZIFeggWwaw0lplSJEOObBiB/nsxlGzL",
	"spwu2qQfJ8v8ePM48+aRn6B0jXeWLEcoPkEsV9Rg+nwVggvy4YPzFFhTGi5dRfJbUSyD9qydhaJfrNJc",
	"BksXGmQoQFt+/gwy4K2n/i/VFKDLoKEYsT4LtJveb40ctK2h67oMXtPmPqCNBvs9U4bL4JpT4I0LlUJb",
	"KYO2brEm5ZaKV6TSBDv1SIoHWKogm4Dudp0C36/oyZiT02SJ1TzkEyG6/Yh7/EAlCyi7pxzfo5aKWUZt",
	"ta33UbSzu2NcSCovEpX/cUK6DAJ9bHWgCop3MJxmzz+D0cnhocvgs+oKFFvD8xRnUjhEOyU5pjRgTmK/",
	"beuaonzF03C3yujIEiUelo3LKYGj4hWywkAq6kYbDJJAoeUsKR/cWldUKW37asuWC+UxYENMQW00r9JM",
	"xIbUxS5joyUnqhjCvE/RZUAzNekDjfllCcW704P0hRWiOn49npMKPBx0giHgdlY4XQbaLl1ve5axTHWn",
	"BrWBAh5Da11pbxbf1zJyVboGMrDYCMZLmVSvMZa6IcsOMmiD7Fox+1jk+WazuTLa/k6VtrI11zZPiJcl",
	"mop0wMvKXdoDQJedZC7qxhtSb169vVe3v96ppVgnWqxFANgnttKlrMewHfI00miJHh+10al6GbBmI9xH",
	"GhRYyGBNIfZBr68WVwvh4jxZ9BoKeJ6GMvDIq1TqfH2d83EPHTP/WTgetYuErymlV+SUxu4qKOBHbatx",
	"P0qYoahxRk2/nTEJLZMfWwrbQ4mG1jw0IoeWsuEKFCYnTTvX81hyi2be8DakNmg5iXnH5gyZkR39TUKM",
	"oSY+EBJRzHn7pIvO8OrR3v8leg+yOHpnY28OzxaLXSuRTbVG740uE6/8Q+ylcsD7NtASCvgmP7xR8uGB",
	"ko81kRp1kogzTtxl8OILsujfSDPx7+wajRbL8i33UV98jbOP74g/SYN1rJautVWviJ1G8+MXgXD97p/J",
	"EFOwaFSksKagaFiYQWybBsMWCnhD3AYbE9mJhAd301ahqvWarBpf6FiLORxd5GL43sUZi7mtJg4jCqfI",
	"L121/WJ5mDxau+MngHRSd9It1zOvjLF7BxJ3U7EtS4px2Rqz/fcE/p8RzQ8pLVGhsrQZy+Yzwjjsvh/f",
	"SQk4RZq7a35y5Z7J0fVe5LmRuZWLXNwsbha5vDf+CAAA//8dwCI8aw0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
